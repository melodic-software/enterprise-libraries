<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enterprise.DomainDrivenDesign</name>
    </assembly>
    <members>
        <member name="T:Enterprise.DomainDrivenDesign.Entities.Aggregates.AggregateRoot`1">
            <summary>
            An aggregate root is an entity that is composed of one or more entities, value objects, etc.
            This base implementation includes basic functionalities for domain event recording and management.
            This class should be inherited by any aggregate root in the domain model to ensure proper event handling and state management.
            </summary>
            <typeparam name="TId">The type of the identifier for the aggregate root (entity).</typeparam>
        </member>
        <member name="F:Enterprise.DomainDrivenDesign.Entities.Aggregates.AggregateRoot`1.DomainEvents">
            <summary>
            This is the collection of internal domain events.
            These are changes that have been made and recorded within the aggregate root.
            </summary>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.AggregateRoot`1.Record(Enterprise.Domain.Events.Model.Abstract.IDomainEvent)">
            <summary>
            Record a domain event that has occurred within the aggregate boundary.
            </summary>
            <param name="domainEvent"></param>
        </member>
        <member name="T:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1">
            <summary>
            Extends the aggregate root with event sourcing capabilities.
            This allows the aggregate's state to be persisted and reconstructed through a sequence of domain events.
            This class supports operations for loading historical events, taking and applying snapshots, and managing versioning for concurrency control.
            </summary>
            <typeparam name="TId">The type of the identifier for the aggregate root.</typeparam>
        </member>
        <member name="P:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.Version">
            <summary>
            Gets the current version of the aggregate.
            This is used for concurrency control and event ordering.
            </summary>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.LoadFromHistory(System.Collections.Generic.IEnumerable{Enterprise.Domain.Events.Model.Abstract.IDomainEvent})">
            <summary>
            Reconstitutes the aggregate from a history of domain events.
            </summary>
            <param name="history">The historical events to load.</param>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.TakeSnapshot">
            <summary>
            Takes a snapshot of the aggregate's current state.
            </summary>
            <returns>A snapshot representing the state of the aggregate.</returns>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.ApplySnapshot(Enterprise.EventSourcing.ISnapshot)">
            <summary>
            Applies a snapshot to restore the aggregate's state.
            </summary>
            <param name="snapshot">The snapshot to apply.</param>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.Enterprise#EventSourcing#IApplyDomainEvent#Apply(Enterprise.Domain.Events.Model.Abstract.IDomainEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.GetUncommittedChanges">
            <summary>
            Get all state changes that have not yet been committed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.MarkChangesAsCommitted">
            <summary>
            Clear changes.
            </summary>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.Apply(Enterprise.Domain.Events.Model.Abstract.IDomainEvent)">
            <summary>
            Applies a domain event to the aggregate's state.
            This method is intended to be used internally by the aggregate to update its state in response to an event.
            It should be called only by the ApplyChange method or when replaying events from the event store during the rehydration of an aggregate.
            Derived classes must implement this method to define how state changes in response to each specific type of event.
            </summary>
            <param name="domainEvent">The event to apply to the aggregate.</param>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.Record(Enterprise.Domain.Events.Model.Abstract.IDomainEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Aggregates.EventSourcedAggregateRoot`1.ApplyChange(Enterprise.Domain.Events.Model.Abstract.IDomainEvent,System.Boolean)">
            <summary>
            Applies a domain event to the aggregate and optionally records it as an uncommitted change.
            This method is the primary way to handle new events within the aggregate.
            Use this method for new events that result from processing commands or other actions that change the state of the aggregate.
            </summary>
            <param name="domainEvent">The event to apply.</param>
            <param name="isNewEvent">Indicates whether the event is new and should be recorded.
            Set this to true when the event originates from within the aggregate as a result of state changes.
            Set to false when replaying historical events to rehydrate the aggregate's state.</param>
        </member>
        <member name="T:Enterprise.DomainDrivenDesign.Entities.Aggregates.IAggregateRoot">
            <summary>
            Designates an entity as the root of an aggregate.
            Aggregate roots encapsulate the aggregate's boundaries and ensure all changes within the aggregate are atomic and consistent.
            They are responsible for enforcing business rules and invariants across the entire aggregate.
            They also allow access to domain events that have occurred within the aggregate boundary.
            Aggregate root identifiers should be globally unique.
            Identifiers of entities inside the aggregate only need to be unique within the aggregate.
            Aggregates can contain other aggregate references, but they can only be identifier references, and not aggregate objects.
            Aggregate entities should not be referenced from outside the aggregate root. Those external references should point to the aggregate root and not the entity type.
            </summary>
        </member>
        <member name="P:Enterprise.DomainDrivenDesign.Entities.Entity`1.Id">
            <summary>
            Gets the identifier of the entity.
            Aggregate root entity IDs must be unique within the system.
            The IDs of child entities under aggregate roots must be unique within the parent aggregate.
            </summary>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Entity`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Enterprise.DomainDrivenDesign.Entities.Entity`1"/> class with the specified identifier.
            Throws an exception if the given ID is the default value for its type,
            enforcing the requirement for entities to have a meaningful identity.
            </summary>
            <param name="id">The unique identifier for the entity.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given ID is the default value for its type.</exception>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Entity`1.Equals(Enterprise.DomainDrivenDesign.Entities.Entity{`0})">
            <summary>
            Compares this entity with another entity for equality based on their identifiers.
            Equality is determined by the identity (ID), not by the attributes of the entity.
            </summary>
            <param name="other">The other entity to compare with.</param>
            <returns>True if the entities are equal; otherwise false.</returns>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Entity`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            Implements object equality, ensuring that the type and ID match.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Entity`1.GetHashCode">
            <summary>
            Serves as the default hash function.
            Hash code is based on the entity's ID, supporting usage in collections.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Enterprise.DomainDrivenDesign.Entities.Entity`1.ToString">
            <summary>
            Returns a string that represents the current object.
            Useful for debugging and logging, showing the type of the entity.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Enterprise.DomainDrivenDesign.Entities.Entity">
            <summary>
            Represents the base class for entities in a domain-driven design context.
            Entities are objects with a distinct identity that runs through time and different states.
            This abstract class provides a standard way to define entities with a unique identifier (GUID).
            </summary>
        </member>
    </members>
</doc>
