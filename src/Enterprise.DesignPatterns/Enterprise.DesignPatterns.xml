<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enterprise.DesignPatterns</name>
    </assembly>
    <members>
        <member name="P:Enterprise.DesignPatterns.ChainOfResponsibility.Modern.Handlers.Handler`1.ShortCircuit">
            <summary>
            Determines if the chain of responsibility should be short-circuited.
            With the classic form, this is typically done after the first handler in the chain is able to handle the request.
            This is defaulted to true, but can be overriden to allow the next handler in the chain to process the request in this scenario.
            </summary>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Modern.Handlers.Handler`1.CanHandle(`0)">
            <summary>
            Each handler in the chain inspects the request to see if it can be handled.
            If it can't, the request is passed on to the next handler in the chain.
            By default, all handlers can handle the type specified.
            This can be overriden if specific logic needs to be added.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:Enterprise.DesignPatterns.ChainOfResponsibility.Modern.Handlers.Handler`2.ShortCircuit">
            <summary>
            Determines if the chain of responsibility should be short-circuited.
            With the classic form, this is typically done after the first handler in the chain is able to handle the request.
            This is defaulted to true, but can be overriden to allow the next handler in the chain to process the request in this scenario.
            </summary>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Modern.Handlers.Handler`2.CanHandle(`0)">
            <summary>
            Each handler in the chain inspects the request to see if it can be handled.
            If it can't, the request is passed on to the next handler in the chain.
            By default, all handlers can handle the type specified.
            This can be overriden if specific logic needs to be added.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Modern.Handlers.ICouldHandle`1.CanHandle(`0)">
            <summary>
            Each handler in the chain can inspect the request to see if it can be handled.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:Enterprise.DesignPatterns.ChainOfResponsibility.Modern.Handlers.IShortCircuit.ShortCircuit">
            <summary>
            Determines if the chain of responsibility should be short-circuited.
            With the classic form, this is typically done after the first handler in the chain is able to handle the request.
            </summary>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.IResponsibilityChain`1">
            <summary>
            Represents a responsibility chain for processing requests without producing a response.
            </summary>
            <typeparam name="TRequest">The type of request the chain will handle.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.IResponsibilityChain`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the chain of responsibility for a given request.
            </summary>
            <param name="request">The request to process.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.IResponsibilityChain`2">
            <summary>
            Represents a responsibility chain for processing requests and producing a response.
            </summary>
            <typeparam name="TRequest">The type of request the chain will handle.</typeparam>
            <typeparam name="TResponse">The type of response the chain will produce.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.IResponsibilityChain`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the chain of responsibility for a given request and produces a response.
            </summary>
            <param name="request">The request to process.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
            <returns>A task representing the asynchronous operation, containing the response.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.ResponsibilityChain`1">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.ResponsibilityChain`1.#ctor(System.Collections.Generic.IEnumerable{Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.IHandler{`0}})">
            <summary>
            Initializes a new instance of the ResponsibilityChain class.
            </summary>
            <param name="handlers">The collection of handlers that will process the requests.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.ResponsibilityChain`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.ResponsibilityChain`2">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.ResponsibilityChain`2.#ctor(System.Collections.Generic.IEnumerable{Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.IHandler{`0,`1}})">
            <summary>
            Initializes a new instance of the ResponsibilityChain class.
            </summary>
            <param name="handlers">The collection of handlers that will process the requests and produce a response.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Chains.ResponsibilityChain`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate">
            <summary>
            Represents a delegate for a successor handler in the chain that performs asynchronous operations without returning a value.
            </summary>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate`1">
            <summary>
            Represents a delegate for a successor handler in the chain that performs asynchronous operations and returns a value of type TResponse.
            </summary>
            <typeparam name="TResponse">The type of response returned by the handler.</typeparam>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.RegistrationExtensions">
            <summary>
            Contains extension methods for IServiceCollection to facilitate the registration of responsibility chains.
            </summary>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.RegistrationExtensions.RegisterChainOfResponsibility``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a responsibility chain for handling requests and responses of specified types.
            </summary>
            <typeparam name="TRequest">The type of request the chain will handle.</typeparam>
            <param name="services">The service collection to which the chain will be added.</param>
            <param name="lifetime">The service lifetime of the responsibility chain.</param>
            <returns>A builder for further configuration of the responsibility chain.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.RegistrationExtensions.RegisterChainOfResponsibility``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a responsibility chain for handling requests and responses of specified types.
            </summary>
            <typeparam name="TRequest">The type of request the chain will handle.</typeparam>
            <typeparam name="TResponse">The type of response the chain will produce.</typeparam>
            <param name="services">The service collection to which the chain will be added.</param>
            <param name="lifetime">The service lifetime of the responsibility chain.</param>
            <returns>A builder for further configuration of the responsibility chain.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`1">
            <summary>
            Builder class for registering handlers in the chain of responsibility.
            </summary>
            <typeparam name="TRequest">The type of request the handlers will process.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the ChainOfResponsibilityRegistrationBuilder class.
            </summary>
            <param name="services">The service collection to which the handlers will be registered.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`1.WithSuccessor``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a handler as a successor in the responsibility chain.
            </summary>
            <typeparam name="TSuccessor">The type of the handler to be registered.</typeparam>
            <param name="serviceLifetime">The service lifetime for the registered handler.</param>
            <returns>The builder instance for chaining further configuration.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`1.WithSuccessor``1(System.Func{System.IServiceProvider,``0},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a handler using a factory method as a successor in the responsibility chain.
            </summary>
            <typeparam name="TSuccessor">The type of the handler to be registered.</typeparam>
            <param name="factory">The factory method used to create the handler.</param>
            <param name="serviceLifetime">The service lifetime for the registered handler.</param>
            <returns>The builder instance for chaining further configuration.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`2">
            <summary>
            Builder class for registering handlers in the chain of responsibility.
            </summary>
            <typeparam name="TRequest">The type of request the handlers will process.</typeparam>
            <typeparam name="TResponse">The type of response the handlers will return.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`2.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the ChainOfResponsibilityRegistrationBuilder class.
            </summary>
            <param name="services">The service collection to which the handlers will be registered.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`2.WithSuccessor``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a handler as a successor in the responsibility chain.
            </summary>
            <typeparam name="TSuccessor">The type of the handler to be registered.</typeparam>
            <param name="serviceLifetime">The service lifetime for the registered handler.</param>
            <returns>The builder instance for chaining further configuration.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Dependencies.ResponsibilityChainRegistrationBuilder`2.WithSuccessor``1(System.Func{System.IServiceProvider,``0},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a handler using a factory method as a successor in the responsibility chain.
            </summary>
            <typeparam name="TSuccessor">The type of the handler to be registered.</typeparam>
            <param name="factory">The factory method used to create the handler.</param>
            <param name="serviceLifetime">The service lifetime for the registered handler.</param>
            <returns>The builder instance for chaining further configuration.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestExceptionHandler`2">
            <summary>
            Generic handler for managing exceptions during the processing of requests.
            </summary>
            <typeparam name="TRequest">The type of request the handler processes.</typeparam>
            <typeparam name="TResponse">The type of response the handler returns.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestExceptionHandler`2.#ctor(Microsoft.Extensions.Logging.ILogger{Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestExceptionHandler{`0,`1}})">
            <summary>
            Initializes a new instance of the RequestExceptionHandler class.
            </summary>
            <param name="logger">Logger for recording exception information.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestExceptionHandler`2.HandleAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the request and manages exceptions.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The next delegate in the chain to be called after this handler.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestExceptionHandler`2.HandleAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate{`1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the request and manages exceptions, with response handling.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The next delegate in the chain to be called after this handler.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
            <returns>The processed response or null in case of an exception.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestLoggingHandler`2">
            <summary>
            Generic handler for logging the processing of requests.
            </summary>
            <typeparam name="TRequest">The type of request the handler processes.</typeparam>
            <typeparam name="TResponse">The type of response the handler returns.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestLoggingHandler`2.#ctor(Microsoft.Extensions.Logging.ILogger{Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestLoggingHandler{`0,`1}})">
            <summary>
            Initializes a new instance of the RequestLoggingHandler class.
            </summary>
            <param name="logger">Logger for recording request processing information.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestLoggingHandler`2.HandleAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles and logs the request.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The next delegate in the chain to be called after this handler.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.Generic.RequestLoggingHandler`2.HandleAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate{`1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles, logs the request, and returns a response.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The next delegate in the chain to be called after this handler.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
            <returns>The processed response.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.IHandler`1">
            <summary>
            Defines a handler in a responsibility chain for processing requests.
            </summary>
            <typeparam name="TRequest">The type of request to be processed.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.IHandler`1.HandleAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate,System.Threading.CancellationToken)">
            <summary>
            Asynchronously processes a request.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The next handler in the chain to be called after this handler.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.IHandler`2">
            <summary>
            Defines a handler in a responsibility chain for processing requests and producing a response.
            </summary>
            <typeparam name="TRequest">The type of request to be processed.</typeparam>
            <typeparam name="TResponse">The type of response to be produced.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Handlers.IHandler`2.HandleAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.SuccessorDelegate{`1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously processes a request and produces a response.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The next handler in the chain to be called after this handler.</param>
            <param name="cancellationToken">Token for handling cancellation of the operation.</param>
            <returns>A task representing the asynchronous operation, containing the response.</returns>
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Enterprise#DesignPatterns#Decorator#Model#IDecorate#Decorated">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Decorated">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Innermost">
            <summary>
            The innermost decorated instance in the decorator chain.
            </summary>
        </member>
        <member name="T:Enterprise.DesignPatterns.Decorator.Model.IDecorate">
            <summary>
            Implementations decorate another object instance.
            The decorated object should be of the same type, but this is the non-generic version.
            </summary>
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.IDecorate.Decorated">
            <summary>
            Gets the decorated object.
            </summary>
        </member>
        <member name="T:Enterprise.DesignPatterns.Decorator.Model.IDecorate`1">
            <summary>
            Implementations decorate another object instance.
            This interface extends the non-generic IDecorate interface, providing type-safe access to the underlying decorated object.
            </summary>
            <typeparam name="T">The type of the decorated object.</typeparam>
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.IDecorate`1.Decorated">
            <summary>
            Gets the decorated object with the specified generic type.
            This property hides the non-generic Decorated property from the base interface.
            </summary>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(``0)">
            <summary>
            Retrieves the innermost decorated instance in a decorator chain.
            </summary>
            <param name="current">The starting point of the decorator chain.</param>
            <returns>The innermost decorated instance.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate)">
            <summary>
            Retrieves the innermost decorated instance starting from a non-generic decorator.
            </summary>
            <param name="current">The starting point of the decorator chain as a non-generic decorator.</param>
            <returns>The innermost decorated instance if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate{``0})">
            <summary>
            Retrieves the innermost decorated instance in a generic decorator chain.
            </summary>
            <param name="current">The starting point of the generic decorator chain.</param>
            <returns>The innermost decorated instance.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(System.Object)">
            <summary>
            Retrieves the innermost decorated instance in a decorator chain, starting from a non-generic object.
            </summary>
            <param name="current">The starting point of the decorator chain as an object.</param>
            <returns>The innermost decorated instance if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate{``0})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainService.GetAllDecorators``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainService.GetDecoratorAtIndex``1(``0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainValidator.IsDecoratorChainValid``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorDepthService.GetDepthOfDecorator``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorHierarchyService.GetChildDecorator``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorIterationService.ForEachDecorator``1(``0,System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTotalService.GetTotalDecorations``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.GetDecoratorTypes``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.IsTypeInChain``1(``0,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.FindSpecificType``1(``0,System.Type)">
            <inheritdoc />
        </member>
    </members>
</doc>
