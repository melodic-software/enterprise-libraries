<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enterprise.DesignPatterns</name>
    </assembly>
    <members>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Enterprise#DesignPatterns#Decorator#Model#IDecorate#Decorated">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Decorated">
            <inheritdoc />
        </member>
        <member name="T:Enterprise.DesignPatterns.Decorator.Model.IDecorate">
            <summary>
            Implementations decorate another object instance.
            The decorated object should be of the same type, but this is the non-generic version.
            </summary>
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.IDecorate.Decorated">
            <summary>
            Gets the decorated object.
            </summary>
        </member>
        <member name="T:Enterprise.DesignPatterns.Decorator.Model.IDecorate`1">
            <summary>
            Implementations decorate another object instance.
            This interface extends the non-generic IDecorate interface, providing type-safe access to the underlying decorated object.
            </summary>
            <typeparam name="T">The type of the decorated object.</typeparam>
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.IDecorate`1.Decorated">
            <summary>
            Gets the decorated object with the specified generic type.
            This property hides the non-generic Decorated property from the base interface.
            </summary>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(``0)">
            <summary>
            Retrieves the innermost decorated instance in a decorator chain.
            </summary>
            <param name="current">The starting point of the decorator chain.</param>
            <returns>The innermost decorated instance.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate)">
            <summary>
            Retrieves the innermost decorated instance starting from a non-generic decorator.
            </summary>
            <param name="current">The starting point of the decorator chain as a non-generic decorator.</param>
            <returns>The innermost decorated instance if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate{``0})">
            <summary>
            Retrieves the innermost decorated instance in a generic decorator chain.
            </summary>
            <param name="current">The starting point of the generic decorator chain.</param>
            <returns>The innermost decorated instance.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(System.Object)">
            <summary>
            Retrieves the innermost decorated instance in a decorator chain, starting from a non-generic object.
            </summary>
            <param name="current">The starting point of the decorator chain as an object.</param>
            <returns>The innermost decorated instance if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate{``0})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainService.GetAllDecorators``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainService.GetDecoratorAtIndex``1(``0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainValidator.IsDecoratorChainValid``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorDepthService.GetDepthOfDecorator``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorHierarchyService.GetChildDecorator``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorIterationService.ForEachDecorator``1(``0,System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTotalService.GetTotalDecorations``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.GetDecoratorTypes``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.IsTypeInChain``1(``0,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.FindSpecificType``1(``0,System.Type)">
            <inheritdoc />
        </member>
    </members>
</doc>
