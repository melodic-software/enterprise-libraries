<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enterprise.DesignPatterns</name>
    </assembly>
    <members>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Classic.ResponsibilityChain`2.PreHandle(`0)">
            <summary>
            Override to add some additional code before calling the next link in the chain.
            Return true to return early and short circuit the chain of execution.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Classic.ResponsibilityChain`2.PostHandle(`0)">
            <summary>
            Override to add some additional code after the request has been handled by the current link in the chain.
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.NextChainLinkDelegate">
            <summary>
            Represents an async continuation for the next link to execute in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.NextChainLinkDelegate`1">
            <summary>
            Represents an async continuation for the next link to execute in the chain.
            </summary>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IChainLink`1">
            <summary>
            Represents a single link in a chain of responsibility that processes a request.
            </summary>
            <typeparam name="TRequest">The type of the request processed by this link.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IChainLink`1.ExecuteAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.NextChainLinkDelegate,System.Threading.CancellationToken)">
            <summary>
            Executes this link in the chain.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The delegate representing the next link in the chain.</param>
            <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IChainLink`2">
            <summary>
            Represents a single link in a chain of responsibility that processes a request and provides a response.
            </summary>
            <typeparam name="TRequest">The type of the request processed by this link.</typeparam>
            <typeparam name="TResponse">The type of the response returned by this link.</typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IChainLink`2.ExecuteAsync(`0,Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.Delegates.NextChainLinkDelegate{`1},System.Threading.CancellationToken)">
            <summary>
            Executes this link in the chain.
            </summary>
            <param name="request">The request to process.</param>
            <param name="next">The delegate representing the next link in the chain.</param>
            <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation and contains the response from this link or from subsequent links.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IResponsibilityChain`1">
            <summary>
            Defines the responsibility for executing the entire chain of links for a request.
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IResponsibilityChain`1.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Executes the entire chain of responsibility for a given request.
            </summary>
            <param name="request">The request to process through the chain.</param>
            <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IResponsibilityChain`2">
            <summary>
            Defines the responsibility for executing the entire chain of links for a request with a response.
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.IResponsibilityChain`2.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Executes the entire chain of responsibility and returns a response.
            </summary>
            <param name="request">The request to process through the chain.</param>
            <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation and includes the response.</returns>
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.ResponsibilityChain`1">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.ResponsibilityChain`1.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.ResponsibilityChain`2">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.ChainOfResponsibility.Pipeline.ResponsibilityChain`2.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Enterprise#DesignPatterns#Decorator#Model#IDecorate#Decorated">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Decorated">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.DecoratorBase`1.Innermost">
            <summary>
            The innermost decorated instance in the decorator chain.
            </summary>
        </member>
        <member name="T:Enterprise.DesignPatterns.Decorator.Model.IDecorate">
            <summary>
            Implementations decorate another object instance.
            The decorated object should be of the same type, but this is the non-generic version.
            </summary>
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.IDecorate.Decorated">
            <summary>
            Gets the decorated object.
            </summary>
        </member>
        <member name="T:Enterprise.DesignPatterns.Decorator.Model.IDecorate`1">
            <summary>
            Implementations decorate another object instance.
            This interface extends the non-generic IDecorate interface, providing type-safe access to the underlying decorated object.
            </summary>
            <typeparam name="T">The type of the decorated object.</typeparam>
        </member>
        <member name="P:Enterprise.DesignPatterns.Decorator.Model.IDecorate`1.Decorated">
            <summary>
            Gets the decorated object with the specified generic type.
            This property hides the non-generic Decorated property from the base interface.
            </summary>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(``0)">
            <summary>
            Retrieves the innermost decorated instance in a decorator chain.
            </summary>
            <param name="current">The starting point of the decorator chain.</param>
            <returns>The innermost decorated instance.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate)">
            <summary>
            Retrieves the innermost decorated instance starting from a non-generic decorator.
            </summary>
            <param name="current">The starting point of the decorator chain as a non-generic decorator.</param>
            <returns>The innermost decorated instance if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate{``0})">
            <summary>
            Retrieves the innermost decorated instance in a generic decorator chain.
            </summary>
            <param name="current">The starting point of the generic decorator chain.</param>
            <returns>The innermost decorated instance.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance.GetInnermost``1(System.Object)">
            <summary>
            Retrieves the innermost decorated instance in a decorator chain, starting from a non-generic object.
            </summary>
            <param name="current">The starting point of the decorator chain as an object.</param>
            <returns>The innermost decorated instance if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(Enterprise.DesignPatterns.Decorator.Model.IDecorate{``0})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratedInstanceService.GetInnermost``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainService.GetAllDecorators``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainService.GetDecoratorAtIndex``1(``0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorChainValidator.IsDecoratorChainValid``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorDepthService.GetDepthOfDecorator``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorHierarchyService.GetChildDecorator``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorIterationService.ForEachDecorator``1(``0,System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTotalService.GetTotalDecorations``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.GetDecoratorTypes``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.IsTypeInChain``1(``0,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.DesignPatterns.Decorator.Services.DecoratorTypeService.FindSpecificType``1(``0,System.Type)">
            <inheritdoc />
        </member>
    </members>
</doc>
