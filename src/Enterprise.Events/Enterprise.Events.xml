<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enterprise.Events</name>
    </assembly>
    <members>
        <member name="T:Enterprise.Events.Callbacks.Facade.EventCallbackService">
            <summary>
            This is a simple facade service that aggregates the registration and raising of event callbacks.
            </summary>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Facade.EventCallbackService.#ctor(Enterprise.Events.Callbacks.Registration.Abstract.IEventCallbackRegistrar,Enterprise.Events.Callbacks.Raising.Abstract.IRaiseEventCallbacks)">
            <summary>
            This is a simple facade service that aggregates the registration and raising of event callbacks.
            </summary>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.EventCallback`1.IsFor(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.EventCallback`1.Execute(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.EventCallback`1.Execute(`0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.EventCallback`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.EventCallback`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.Events.Callbacks.Model.IEventCallback.HasBeenExecuted">
            <summary>
            Has the callback already been executed?
            </summary>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.IEventCallback.IsFor(Enterprise.Events.Model.IEvent)">
            <summary>
            Is the callback action for the specified event type?
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.IEventCallback.Execute(Enterprise.Events.Model.IEvent)">
            <summary>
            Execute the callback.
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Model.IEventCallback`1.Execute(`0)">
            <summary>
            Execute the callback.
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Raising.Abstract.IRaiseEventCallbacks.RaiseCallbacks(System.Collections.Generic.IEnumerable{Enterprise.Events.Model.IEvent})">
            <summary>
            Raise the callbacks for each of the events in the collection.
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Raising.Abstract.IRaiseEventCallbacks.RaiseCallbacks``1(``0)">
            <summary>
            Raise callbacks for a single event.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Raising.EventCallbackRaiser.RaiseCallbacks(System.Collections.Generic.IEnumerable{Enterprise.Events.Model.IEvent})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Raising.EventCallbackRaiser.RaiseCallbacks``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Registration.Abstract.IClearCallbacks.ClearCallbacks">
            <summary>
            Clears any registered callbacks.
            </summary>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Registration.Abstract.IGetRegisteredCallbacks.GetRegisteredCallbacks">
            <summary>
            Get the current collection of callback registrations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Registration.Abstract.IRegisterEventCallbacks.RegisterEventCallback``1(System.Action{``0})">
            <summary>
            Register a delegate to react to events that have been raised during use case execution.
            These are typically domain events.
            </summary>
            <typeparam name="TEvent">The type of event.</typeparam>
            <param name="action">The action to invoke when the event is raised.</param>
        </member>
        <member name="M:Enterprise.Events.Callbacks.Registration.EventCallbackRegistrar.RegisterEventCallback``1(System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Registration.EventCallbackRegistrar.GetRegisteredCallbacks">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Callbacks.Registration.EventCallbackRegistrar.ClearCallbacks">
            <inheritdoc />
        </member>
        <member name="T:Enterprise.Events.Dispatching.Abstract.EventDispatcherBase">
            <summary>
            Base class for event dispatchers that provides common functionalities to dispatch events.
            This class handles the resolution, filtering, and processing of event handlers based on the incoming events.
            </summary>
        </member>
        <member name="M:Enterprise.Events.Dispatching.Abstract.EventDispatcherBase.#ctor(Enterprise.DesignPatterns.Decorator.Services.Abstract.IGetDecoratedInstance,Microsoft.Extensions.Logging.ILogger{Enterprise.Events.Dispatching.Abstract.EventDispatcherBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Enterprise.Events.Dispatching.Abstract.EventDispatcherBase"/> class.
            </summary>
            <param name="decoratorService">Service to access decorated instances of handlers.</param>
            <param name="logger">Logger for logging operations within the dispatcher.</param>
        </member>
        <member name="M:Enterprise.Events.Dispatching.Abstract.EventDispatcherBase.DispatchAsync(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Abstract.EventHandlerBase`1.HandleAsync(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Abstract.EventHandlerBase`1.HandleAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Decoration.Abstract.EventHandlerDecoratorBase`1.HandleAsync(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Decoration.Abstract.EventHandlerDecoratorBase`1.HandleAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Resolution.Abstract.EventHandlerResolverBase.ResolveAsync(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Resolution.Abstract.EventHandlerResolverBase.ResolveAsync``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Resolution.DynamicDispatchingEventHandlerResolver.ResolveAsync(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Events.Handlers.Resolution.ReflectionEventHandlerResolver.ResolveAsync(Enterprise.Events.Model.IEvent)">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.Events.Model.Event.Id">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.Events.Model.Event.DateOccurred">
            <inheritdoc />
        </member>
        <member name="P:Enterprise.Events.Model.IEvent.Id">
            <summary>
            The unique identifier for the event.
            </summary>
        </member>
        <member name="P:Enterprise.Events.Model.IEvent.DateOccurred">
            <summary>
            The date and time the event occurred (in UTC).
            </summary>
        </member>
        <member name="T:Enterprise.Events.Raising.Abstract.IRaiseEvents">
            <summary>
            Raises events.
            </summary>
        </member>
        <member name="M:Enterprise.Events.Raising.Abstract.IRaiseEvents.RaiseAsync(System.Collections.Generic.IReadOnlyCollection{Enterprise.Events.Model.IEvent})">
            <summary>
            Raises events.
            </summary>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Events.Raising.Abstract.IRaiseEvents.RaiseAsync(Enterprise.Events.Model.IEvent)">
            <summary>
            Raise an event.
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Events.Raising.EventRaiser.RaiseAsync(System.Collections.Generic.IReadOnlyCollection{Enterprise.Events.Model.IEvent})">
            <inheritdoc />
        </member>
    </members>
</doc>
