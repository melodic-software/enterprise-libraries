<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enterprise.Domain</name>
    </assembly>
    <members>
        <member name="T:Enterprise.Domain.Entities.IEntity">
            <summary>
            A marker interface declaring the implementation is a domain entity.
            </summary>
        </member>
        <member name="T:Enterprise.Domain.Events.IClearDomainEvents">
            <summary>
            Provides a mechanism for clearing domain events.
            </summary>
        </member>
        <member name="M:Enterprise.Domain.Events.IClearDomainEvents.ClearDomainEvents">
            <summary>
            Clear the collection of domain events.
            </summary>
        </member>
        <member name="T:Enterprise.Domain.Events.IGetDomainEvents">
            <summary>
            Allows implementations to expose a collection of domain events.
            </summary>
        </member>
        <member name="M:Enterprise.Domain.Events.IGetDomainEvents.GetDomainEvents">
            <summary>
            Get the collection of domain events.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Domain.Events.IRecordDomainEvents">
            <summary>
            Implementations allow for public recording of domain events.
            Some paradigms like domain driven design suggest that this functionality should not be publicly accessible.
            In those cases, this interface should not be used. The recording should be encapsulated internally and triggered by use case specific methods.
            </summary>
        </member>
        <member name="T:Enterprise.Domain.Events.Model.Abstract.IDomainEvent">
            <summary>
            Represents an event that happened within the system that is of importance to the business.
            </summary>
        </member>
        <member name="F:Enterprise.Domain.Events.Queuing.DomainEventQueuingConstants.DomainEventQueueKey">
            <summary>
            Key for accessing the domain events queue stored in the items collection of a scoped HTTP request context.
            </summary>
        </member>
        <member name="P:Enterprise.Domain.Events.Queuing.Options.DomainEventQueuingConfigOptions.EnableDomainEventQueuing">
            <summary>
            When enabled, the domain events will no longer be raised in real time.
            Instead, domain events will be added to a queue stored in the scoped HTTP context items collection.
            Unless configured otherwise, callbacks will immediately be executed.
            The domain events themselves will be raised after the response has been issued.
            The idea here to process side effects in the background.
            Technically the use case may not be considered complete until these events have been handled.
            Mechanisms may need to be in place to notify users of failure.
            </summary>
        </member>
        <member name="T:Enterprise.Domain.Events.Raising.Abstract.IRaiseDomainEvents">
            <summary>
            Raises domain events.
            </summary>
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.Abstract.IRaiseDomainEvents.RaiseAsync(System.Collections.Generic.IReadOnlyCollection{Enterprise.Domain.Events.Model.Abstract.IDomainEvent})">
            <summary>
            Raise domain events.
            </summary>
            <param name="domainEvents"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.Abstract.IRaiseDomainEvents.RaiseAsync(Enterprise.Domain.Events.Model.Abstract.IDomainEvent)">
            <summary>
            Raise domain events.
            </summary>
            <param name="domainEvent"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Domain.Events.Raising.Abstract.IRaiseRecordedDomainEvents">
            <summary>
            Raises domain events recorded by entities and optionally executes callbacks using an external callback service.
            </summary>
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.Abstract.IRaiseRecordedDomainEvents.RaiseAsync(System.Collections.Generic.IEnumerable{Enterprise.Domain.Events.IGetDomainEvents})">
            <summary>
            Raise domain events recorded by each entity and execute any registered callbacks associated with each event.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.Abstract.IRaiseRecordedDomainEvents.RaiseAsync(Enterprise.Domain.Events.IGetDomainEvents)">
            <summary>
            Raise domain events recorded by the entity and execute any registered callbacks associated with the event.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.DomainEventRaiser.RaiseAsync(System.Collections.Generic.IEnumerable{Enterprise.Domain.Events.IGetDomainEvents})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.DomainEventRaiser.RaiseAsync(Enterprise.Domain.Events.IGetDomainEvents)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.DomainEventRaiser.RaiseAsync(System.Collections.Generic.IReadOnlyCollection{Enterprise.Domain.Events.Model.Abstract.IDomainEvent})">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Domain.Events.Raising.DomainEventRaiser.RaiseAsync(Enterprise.Domain.Events.Model.Abstract.IDomainEvent)">
            <inheritdoc />
        </member>
        <member name="M:Enterprise.Domain.Extensions.ErrorExtensions.ToEvent(Enterprise.Patterns.ResultPattern.Errors.IError)">
            <summary>
            Translate the error to a <see cref="T:Enterprise.Domain.Events.Model.ErrorOccurred"/> event.
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Domain.Extensions.ErrorExtensions.ToEvents(System.Collections.Generic.IEnumerable{Enterprise.Patterns.ResultPattern.Errors.IError})">
            <summary>
            Translate the errors to <see cref="T:Enterprise.Domain.Events.Model.ErrorOccurred"/> events.
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Domain.Validation.Ensure">
            <summary>
            Provides guard clause methods for validating strings.
            These methods throw exceptions when validation fails, preventing further execution.
            </summary>
        </member>
        <member name="M:Enterprise.Domain.Validation.Ensure.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Validates that a given string is not null or empty.
            </summary>
            <param name="value">The string to validate.</param>
            <param name="paramName">
            The name of the parameter being validated, captured automatically.
            This is used in the exception message to identify the failing parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the input string is null or empty.
            </exception>
        </member>
        <member name="M:Enterprise.Domain.Validation.Ensure.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Validates that a given string is not null, empty, or composed only of white-space characters.
            </summary>
            <param name="value">The string to validate.</param>
            <param name="paramName">
            The name of the parameter being validated, captured automatically.
            This is used in the exception message to identify the failing parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the input string is null, empty, or white-space.
            </exception>
        </member>
    </members>
</doc>
